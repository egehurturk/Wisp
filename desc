Wisp app Description and MAIN features:

    * Strava-like run logging with map display (a map display similar to google maps display when you start a route from start place to a direction, and it will start from your start GPS location and as you run through it will update similar to google maps), heart rate (if available) display while running, and pace / avarege pace, total distance, and other statistics displayed on the run screen while recording a run
    * Ghost feature: ghosts are your competitors. The competitors can be your past runs (you can select), your PRs, your custom goals, your Strava friends, or training plans.
    * Local discovery feature: As you run with your friends (and the whole group is using the Wisp app), you can create a Group by adding other users, and in that tab it will show a map with all the other users running and it will show real-time locations of other people in your Group, and display statistics such as pace or heart rate (if availablee) as a tooltip.
    * Should be easily integrable with Strava, noting that the activites can be exported to Strava, or any past runs/friends from Strava can be imported into the app.

UI Description:
    * Home page with a tab at the bottom, in the middle there's a record button that when pressed, it will go to "Select Run Type" screen. The bottom tab will also have icons for Home, Settings (at the far right), Runs (for past runs), Statistics (for past run statistics), a Ghost icon (where it will lead to a page related to "Ghosts" concept), and an icon for Groups (where you can create friend groups to run with). 
        * Then, in Home screen, it will show Past runs as cards, each card having a map of the route, and more importantly it will display information about the race between your saved run vs the ghost run in that session. Each card will have a replay button that will show the race between you vs the ghost of that session.
    * Home page will have the user profile rounded button on the top right, when clicked it will lead to its profile. One can access friends list, user preferences, user profile (edit, view, etc), and other things through there.
    * Home page will also feature Custom Goal Ghosts (aka training plans) as model cards, with start run buttons on them as an icon (without text)
    * The record run when pressed should lead to "Select Run Type" screen as described above. 
        * The select run type screen should allow you to choose from 2 different running modes, first being "run from ghosts", the second being "run with a group from a ghost". Note that these two should be big and designed nicely. 
        * When pressed on "run from ghosts", it will lead to a page where you can select which ghost you like to run with. It should feature all of the ghosts in the library. Create mock/stub ghosts for now, including ghosts for your PRs, Strava friends (with Strava logo), custom Ghost types. Then, after selecting it, it will display the current run statistics in bold typeface, similar to Strava or Nike's app. The statistics should be: time, distance, average pace for now, pace in the current km/mile split, heart rate data (if available), cadence (if available). It should be minimal, similar to Strava or Nike's app, displaying some statistics at the top with big-bold typeface, and displaying a Map that has your location progressing through by drawing a red line from your starting location to your current location facing forward, and displaying an animated Ghost behind or in front of you. The goal is to again chase with the ghost.
            * When the run is paused, it will not display the map but the statistics.
            * When the run is finished, it will go to a Run summary page, where you'll see the summary of your run and the ghost summary.
            * In that page, there will be a button that will allow you to save the run. If clicked on it, it will save the run to your profile. If the discard button is selected it will discard the run.
        * If "run with group" is selected, then it should lead to another page where it should allow you to choose which group you'll send invites to. After selecting the Group, you should be able to select a Ghost for the whole group. For other users in the group selected, they should receieve a notificaion or an invite for the group run invitation. If everyone on the group accepts the invitation, everyone except the Group leader advances to a temporary page where it will display a big text "Waiting for the Group Leader to start the run". The group leader will advance to a page where a new run can be started. When the group leader starts the run, everyone will have the display of their own statistics above in big bold typeface, and a map that shows real-time locations of everyone in the group with their statistics as small tooltips, and their routes. It will also show the designated ghost following its route. When the run is over (when the group leader presses finish), everyone will lead to a Post-Run screen where a leaderboard will be displayed with statistics for each people and the map with the route. Users that finish behind the ghost will receieve no points within the group, and according to the leaderboard, users will receieve points for their ranking.
    * The Runs page will show past runs as cards, similar to Strava's on your activites tab. It will show information about the Ghost and your statistics, and will show a small animation where the winner (either the ghost or your profile) lifting a small animated trophy. 
    * The statistics should show your past run statistics, the rivarly between ghosts and you, and should be a statistics screen as you wish.
    * The Ghost page should be a page where you can add ghosts, edit ghosts, or view your ghosts. A ghost can be added from past-runs (if a ghost is added from a past run, the ghost will follow the exact same route with exact same splits from that run), from your PRs, from your (Strava) friends' runs, from custom goals (by manually entering run statistics that you want to achieve (target pace, etc)), or from training plans available. 
    * The Groups will display the groups you are in, with options to create a group, or edit and delete a group if you are the group leader. Any groups you create you will be the group leader. As you click a specific group from the groups page, you can see past runs within the group and a general leaderboard within the group.
    * The settings will be a general settings page with settings that allow you to change units, theme, etc.

Other remarks:
    * If the app is in background, it should still work (refresh in the background and continue logging the run).
    * Health, location, etc access should be retrieved. 
        * For instance, for health access, if heart rate data is not available, do not display heart rate at all. If it is available, display it.
    * Integration with Strava


Future ideas:
[] Ghost customization (ghost style -- skins, etc.)


[] Pricing:
    [] Free tier:
        [] 5 groups, at most 4 people within a group
        [] 3 ghosts
        [] Limited training plans for ghosts
    [] Premium tier:
        [] Unlimited ghosts, unlimited groups, unlimited people in a group




* Location Services:
    * we need the following services for active runs:
        * location (gps) tracking: creating a run path as you progress, like strava
        * location run statistics: average pace, pace per the recent split, distance,
        * weather services: get weather-data when you start the run to log
        * health services: get calories, heart rate, cadence, etc to show while running
        * voice coaching: audio effects that coach you during the run, giving alerts and status about the ghost, etc.
        *

* Run summary view map issue
* The runs you won and the runs you lost their cards should be different
* Runs page the top statistics (total runs etc) should not be stick
* User profile navbar dropdown make it open from the profile pic not the top






‚è∫ Key Data Models Found:
  1. PastRun (from Stubs.swift): Contains distance, duration, pace, date, location, weather, ghost results
  2. Ghost (from Stubs.swift): Different types (personalRecord, strava, custom), contains run data for comparison
  3. User/Profile: Authentication system with Supabase, user profiles
  4. StravaActivity: Integration with Strava for importing runs
  5. Challenge: Group challenges and competitions
  6. Weather: Weather data associated with runs
  7. RouteData: GPS coordinates and map data

  Key Features Requiring Data Storage:
  1. Run Tracking: GPS data, metrics, weather, duration, pace
  2. Ghost Racing: Comparing against past performances, friends, custom goals
  3. Strava Integration: Importing activities, syncing with external data
  4. Social Features: Friends, groups, challenges
  5. User Management: Profiles, authentication, preferences
  6. Analytics: Performance tracking, statistics

  Data Relationships Identified:
  - Users have many runs
  - Users can have many ghosts (personal records, custom goals)
  - Runs can have weather data
  - Runs have route/GPS data
  - Users can follow other users (Strava integration)
  - Challenges involve multiple users
  - Ghost comparisons link to specific runs

  Storage Requirements:
  - GPS coordinates (arrays of lat/lon points)
  - Weather data (temperature, conditions, etc.)
  - Performance metrics (pace, distance, time)
  - Social connections (followers, friends)
  - External integrations (Strava tokens, activity IDs)

  -- OAuth integrations (Strava, Google, etc.)
  CREATE TABLE user_oauth_connections (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      provider VARCHAR(50) NOT NULL, -- 'strava', 'google', etc.
      provider_user_id VARCHAR(255) NOT NULL,
      access_token TEXT,
      refresh_token TEXT,
      token_expires_at TIMESTAMP,
      connected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      last_sync_at TIMESTAMP,
      is_active BOOLEAN DEFAULT true,
      UNIQUE(user_id, provider)
  );

  -- Runs data
  CREATE TABLE runs (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      external_id VARCHAR(255), -- Strava activity ID, etc.
      data_source VARCHAR(50) NOT NULL DEFAULT 'app', -- 'app', 'strava', etc.
      title VARCHAR(255),
      distance_meters DECIMAL(10,2) NOT NULL,
      duration_seconds INTEGER NOT NULL,
      average_pace_seconds_per_km DECIMAL(8,2),
      calories_burned INTEGER,
      elevation_gain_meters DECIMAL(8,2),
      started_at TIMESTAMP NOT NULL,
      completed_at TIMESTAMP NOT NULL,
      timezone VARCHAR(50),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      INDEX idx_user_started_at (user_id, started_at),
      INDEX idx_data_source (data_source),
      INDEX idx_external_id (external_id)
  );

  -- GPS route data for runs
  CREATE TABLE run_routes (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      run_id UUID NOT NULL REFERENCES runs(id) ON DELETE CASCADE,
      route_data JSONB NOT NULL, -- Array of {lat, lng, timestamp, altitude, speed}
      polyline TEXT, -- Encoded polyline for efficient storage/transmission
      start_latitude DECIMAL(10,8),
      start_longitude DECIMAL(11,8),
      end_latitude DECIMAL(10,8),
      end_longitude DECIMAL(11,8),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      INDEX idx_run_id (run_id),
      INDEX idx_start_location (start_latitude, start_longitude)
  );

  -- Weather data for runs
  CREATE TABLE run_weather (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      run_id UUID NOT NULL REFERENCES runs(id) ON DELETE CASCADE,
      temperature_celsius DECIMAL(4,1),
      humidity_percent INTEGER,
      wind_speed_kmh DECIMAL(5,2),
      wind_direction_degrees INTEGER,
      weather_condition VARCHAR(100), -- 'sunny', 'cloudy', 'rainy', etc.
      weather_description TEXT,
      pressure_hpa DECIMAL(7,2),
      visibility_km DECIMAL(5,2),
      recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(run_id)
  );

  -- Ghost types and configurations
  CREATE TABLE ghost_types (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      name VARCHAR(100) NOT NULL UNIQUE, -- 'personal_record', 'strava_friend', 'custom_goal'
      description TEXT,
      is_active BOOLEAN DEFAULT true
  );

  -- Ghosts for race comparisons
  CREATE TABLE ghosts (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      ghost_type_id UUID NOT NULL REFERENCES ghost_types(id),
      name VARCHAR(255) NOT NULL,
      description TEXT,
      target_distance_meters DECIMAL(10,2) NOT NULL,
      target_duration_seconds INTEGER NOT NULL,
      target_pace_seconds_per_km DECIMAL(8,2),
      based_on_run_id UUID REFERENCES runs(id), -- For personal record ghosts
      strava_friend_user_id UUID REFERENCES users(id), -- For Strava friend ghosts
      custom_splits JSONB, -- For custom pacing plans
      is_active BOOLEAN DEFAULT true,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      INDEX idx_user_type (user_id, ghost_type_id),
      INDEX idx_target_distance (target_distance_meters)
  );

  -- Ghost race results (when racing against a ghost)
  CREATE TABLE ghost_race_results (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      run_id UUID NOT NULL REFERENCES runs(id) ON DELETE CASCADE,
      ghost_id UUID NOT NULL REFERENCES ghosts(id) ON DELETE CASCADE,
      time_difference_seconds INTEGER, -- positive = slower than ghost, negative = faster
      distance_completed_meters DECIMAL(10,2),
      percentage_completed DECIMAL(5,2),
      result_status VARCHAR(50), -- 'won', 'lost', 'abandoned'
      splits_comparison JSONB, -- Detailed split-by-split comparison
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      INDEX idx_run_ghost (run_id, ghost_id),
      INDEX idx_ghost_results (ghost_id, created_at)
  );

  -- User relationships (following, friends)
  CREATE TABLE user_relationships (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      follower_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      followed_user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      relationship_type VARCHAR(50) NOT NULL, -- 'follow', 'friend', 'strava_friend'
      status VARCHAR(50) DEFAULT 'active', -- 'active', 'blocked', 'pending'
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(follower_user_id, followed_user_id, relationship_type),
      CHECK (follower_user_id != followed_user_id)
  );

  -- Challenges and group activities
  CREATE TABLE challenges (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      creator_user_id UUID NOT NULL REFERENCES users(id),
      title VARCHAR(255) NOT NULL,
      description TEXT,
      challenge_type VARCHAR(100) NOT NULL, -- 'distance', 'time', 'pace', 'group_run'
      start_date DATE NOT NULL,
      end_date DATE NOT NULL,
      target_value DECIMAL(12,2), -- target distance, time, etc.
      target_unit VARCHAR(50), -- 'meters', 'seconds', 'pace_seconds_per_km'
      is_public BOOLEAN DEFAULT false,
      max_participants INTEGER,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      INDEX idx_dates (start_date, end_date),
      INDEX idx_creator (creator_user_id)
  );

  -- Challenge participants
  CREATE TABLE challenge_participants (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      challenge_id UUID NOT NULL REFERENCES challenges(id) ON DELETE CASCADE,
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      status VARCHAR(50) DEFAULT 'active', -- 'active', 'completed', 'withdrawn'
      final_result DECIMAL(12,2), -- final distance/time achieved
      ranking INTEGER,
      UNIQUE(challenge_id, user_id)
  );

  -- Challenge runs (runs that count toward a challenge)
  CREATE TABLE challenge_runs (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      challenge_id UUID NOT NULL REFERENCES challenges(id) ON DELETE CASCADE,
      run_id UUID NOT NULL REFERENCES runs(id) ON DELETE CASCADE,
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      contribution_value DECIMAL(12,2), -- how much this run contributes to challenge
      recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(challenge_id, run_id)
  );

  -- App settings and preferences
  CREATE TABLE user_preferences (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      preference_key VARCHAR(100) NOT NULL,
      preference_value TEXT,
      data_type VARCHAR(50) DEFAULT 'string', -- 'string', 'boolean', 'integer', 'decimal'
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(user_id, preference_key)
  );

  -- Notification settings
  CREATE TABLE notification_settings (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      notification_type VARCHAR(100) NOT NULL, -- 'challenge_invite', 'friend_request', 'run_reminder'
      is_enabled BOOLEAN DEFAULT true,
      delivery_method VARCHAR(50) DEFAULT 'push', -- 'push', 'email', 'both'
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(user_id, notification_type)
  );

  -- System notifications/messages
  CREATE TABLE notifications (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      notification_type VARCHAR(100) NOT NULL,
      title VARCHAR(255) NOT NULL,
      message TEXT,
      data JSONB, -- Additional notification data
      is_read BOOLEAN DEFAULT false,
      is_sent BOOLEAN DEFAULT false,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      read_at TIMESTAMP,
      INDEX idx_user_unread (user_id, is_read, created_at),
      INDEX idx_type_created (notification_type, created_at)
  );


 **One-to-Many Relationships:**
  - `users` ‚Üí `runs` (one user has many runs)
  - `users` ‚Üí `ghosts` (one user has many ghosts)
  - `users` ‚Üí `challenges` (one user can create many challenges)
  - `runs` ‚Üí `ghost_race_results` (one run can have multiple ghost comparisons)
  - `ghosts` ‚Üí `ghost_race_results` (one ghost can be used in many races)
  - `challenges` ‚Üí `challenge_participants` (one challenge has many participants)
  - `challenges` ‚Üí `challenge_runs` (one challenge includes many runs)
  - `users` ‚Üí `user_preferences` (one user has many preference settings)
  - `users` ‚Üí `notifications` (one user receives many notifications)

  **One-to-One Relationships:**
  - `runs` ‚Üí `run_routes` (each run has one route)
  - `runs` ‚Üí `run_weather` (each run has one weather record)

  **Many-to-Many Relationships:**
  - `users` ‚Üî `users` (through `user_relationships` - users can follow/friend each other)
  - `users` ‚Üî `challenges` (through `challenge_participants` - users participate in challenges)
  - `runs` ‚Üî `challenges` (through `challenge_runs` - runs can count toward challenges)

  **Self-Referencing Relationships:**
  - `ghosts` ‚Üí `runs` (ghosts can be based on specific runs via `based_on_run_id`)
  - `ghosts` ‚Üí `users` (ghosts can reference other users via `strava_friend_user_id`)
  
  
  **1. User Management Design:**
  - Separated OAuth connections into dedicated table to support multiple providers (Strava, Google) per user
  - UUID primary keys for better security and distributed system compatibility
  - Flexible user preferences system for app settings

  **2. Runs Data Structure:**
  - Separated route data into `run_routes` table due to potentially large GPS coordinate arrays
  - Used JSONB for route data to efficiently store coordinate arrays while maintaining queryability
  - Included `external_id` and `data_source` to track Strava imports vs app-recorded runs
  - Weather data in separate table since it's optional and has different update patterns

  **3. Ghost System Design:**
  - Flexible ghost type system allowing for personal records, Strava friends, and custom goals
  - `ghost_race_results` table captures detailed comparison data including splits
  - Support for custom pacing plans through JSONB field
  - References to base runs and Strava friends for different ghost types

  **4. Social Features:**
  - Generic `user_relationships` table supports following, friends, and Strava connections
  - Challenge system with flexible participation and run tracking
  - Notification system for social interactions

  **5. Performance Considerations:**
  - Strategic indexes on frequently queried columns (user_id, timestamps, locations)
  - JSONB for flexible data storage while maintaining performance
  - Separate tables for large/optional data (routes, weather) to keep main tables lean

  **6. Data Integrity:**
  - Foreign key constraints ensure referential integrity
  - Check constraints prevent invalid data (e.g., users following themselves)
  - Unique constraints prevent duplicate relationships and settings



 **1. Analytics and Performance Tracking:**
  ```sql
  CREATE TABLE user_statistics (
      user_id UUID PRIMARY KEY REFERENCES users(id),
      total_runs INTEGER DEFAULT 0,
      total_distance_meters DECIMAL(12,2) DEFAULT 0,
      total_duration_seconds BIGINT DEFAULT 0,
      best_5k_time_seconds INTEGER,
      best_10k_time_seconds INTEGER,
      best_half_marathon_time_seconds INTEGER,
      best_marathon_time_seconds INTEGER,
      last_calculated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  );

  2. Training Plans and Goals:
  CREATE TABLE training_plans (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID NOT NULL REFERENCES users(id),
      name VARCHAR(255) NOT NULL,
      target_race_distance_meters INTEGER,
      target_race_date DATE,
      weekly_schedule JSONB, -- Structured training schedule
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  );

  3. Location and Route Management:
  CREATE TABLE popular_routes (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      name VARCHAR(255) NOT NULL,
      description TEXT,
      route_data JSONB NOT NULL,
      distance_meters DECIMAL(10,2),
      difficulty_level INTEGER, -- 1-5 scale
      times_completed INTEGER DEFAULT 0,
      average_rating DECIMAL(3,2),
      created_by_user_id UUID REFERENCES users(id)
  );

  4. Achievement System:
  CREATE TABLE achievements (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      name VARCHAR(255) NOT NULL,
      description TEXT,
      badge_icon_url TEXT,
      criteria JSONB, -- Achievement criteria
      is_active BOOLEAN DEFAULT true
  );

  CREATE TABLE user_achievements (
      user_id UUID REFERENCES users(id),
      achievement_id UUID REFERENCES achievements(id),
      earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      PRIMARY KEY (user_id, achievement_id)
  );

  5. Data Retention and Privacy:
  - Consider implementing soft deletes for runs and user data
  - Add data retention policies for old notifications and temporary data
  - Include privacy settings for profile visibility and data sharing
  - Add audit logs for sensitive operations (OAuth connections, data exports)

  6. API Rate Limiting and Caching:
  - Consider adding tables for API rate limiting if building custom backend
  - Cache frequently accessed statistics and leaderboards
  - Store aggregated data for dashboard views to improve performance
